package test.data.mockupservice.client;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

import test.data.mockupservice.server.Greeter;

import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.3.6
 * 2016-02-18T23:36:32.500+05:30
 * Generated source version: 2.3.6
 *
 */
@WebServiceClient(name = "SOAPService",
		wsdlLocation = "helloworld.wsdl",
		targetNamespace = "http://apache.org/hello_world_soap_http")
public class SOAPService extends Service {

	public final static URL WSDL_LOCATION;

	public final static QName SERVICE = new QName("http://apache.org/hello_world_soap_http", "SOAPService");
	public final static QName SoapPort = new QName("http://apache.org/hello_world_soap_http", "SoapPort");
	static {
		URL url = null;
		try {
			url = new URL("helloworld.wsdl");
		} catch (MalformedURLException e) {
			java.util.logging.Logger.getLogger(SOAPService.class.getName())
					.log(java.util.logging.Level.INFO,
							"Can not initialize the default wsdl from {0}", "helloworld.wsdl");
		}
		WSDL_LOCATION = url;
	}

	public SOAPService(URL wsdlLocation) {
		super(wsdlLocation, SERVICE);
	}

	public SOAPService(URL wsdlLocation, QName serviceName) {
		super(wsdlLocation, serviceName);
	}

	public SOAPService() {
		super(WSDL_LOCATION, SERVICE);
	}

	//This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
	//API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
	//compliant code instead.
	public SOAPService(WebServiceFeature ... features) {
		super(WSDL_LOCATION, SERVICE, features);
	}

	//This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
	//API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
	//compliant code instead.
	public SOAPService(URL wsdlLocation, WebServiceFeature ... features) {
		super(wsdlLocation, SERVICE, features);
	}

	//This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
	//API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
	//compliant code instead.
	public SOAPService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
		super(wsdlLocation, serviceName, features);
	}

	/**
	 *
	 * @return
	 *     returns Greeter
	 */
	@WebEndpoint(name = "SoapPort")
	public Greeter getSoapPort() {
		return super.getPort(SoapPort, Greeter.class);
	}

	/**
	 *     * 
	 * @param features
	 *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
	 * @return
	 *     returns Greeter
	 */
	@WebEndpoint(name = "SoapPort")
	public Greeter getSoapPort(WebServiceFeature... features) {
		return super.getPort(SoapPort, Greeter.class, features);
	}

}